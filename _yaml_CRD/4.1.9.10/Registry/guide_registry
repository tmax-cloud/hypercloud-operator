# Registry Custom Resource
	- Secure Reigstry 및  secret 관리
	- Registry의 metadata, SVC(Service), PVC(Persistent Volume Claim), CM(ConfigMap) 정보 입력
	- {REGISTRY_NAMESPACE}에 생성되는 Resources 
		- SVC: hpcd-{REGISTRY_NAME}
		- PVC: hpcd-{REGISTRY_NAME}
		- Secret(Registry Info, type: Opaque): hpcd-{REGISTRY_NAME}
		- Secret(ImagePullSecret, type: kubernetes.io/dockerconfigjson): hpcd-registry-{REGISTRY_NAME}
		- Secret(tls, type: kubernetes.io/tls): hpcd-tls-{REGISTRY_NAME}
		- RS: hpcd-registry-{REGISTRY_NAME}
		- CM: hpcd-{REGISTRY_NAME}  (Note: /spec/customConfigYml에 입력한 string의 configmap이 없는 경우 생성)
		- Ingress: hpcd-{REGISTRY_NAME}  (registry의 service type이 ingress인 경우에만 생성)
	
# Resource 상태
	- Status: Creating 
		- Registry가 사용할 SVC, PVC, RS 생성중인 상태 
	- Status: Running
		- Registry의  SVC, Secret, RS가 존재하고 Pod내 container가 ready인 상태
	- Status: NotReady
		- Container가 ready가 아닌 상태
	- Status: Error
		- Registry의 리소스(svc, pvc, rs, secret) 생성에 실패한 상태
		- Reigstry의 리소스(svc, rs, secret)가 존재하지 않는 상태
		- Registry Pod가 종료되었거나 에러인 경우
	
# 필수 요구 사항
	- secret-watcher가 daemonset으로 동작하고 있어야 함
		- Registry가 생성한 Secret(Registry Info)으로 Registry의 인증서를 /etc/docker/certs.d/{REGISTRY_IP}:{REGISTRY_PORT} 디렉토리에 생성
	- registry:b004 이미지 사용
		- Registry를 생성할 경우 secure registry를 위한 image인 registry:b004를 사용해야한다. (.spec.image 필드에 registry:b004 이미지 주소를 입력)
		- 192.168.6.110:5000 registry에서 제공
	- hypercloud4-system namespace에 registry-config 이름의 CM이 생성되어 있어야 한다.
	    - registry와 image간의 sync를 맞춰주기 위해서는 registry-config CM에 config.yml 설정으로 
	      notifications의 endpoint url 주소가 hypercloud4-oprator의 /registry/event 주소로 설정되어 있어야한다.
	    - default로 제공하는 registry의 config.yml을 사용하지 않고 사용자의 config.yml을 사용하고 싶은 경우 사용자의 CM을 만든 후 /spec/customConfigYml에 CM 이름을 입력하여 적용할 수 있다.
		
# 기능 상세
	- Registry 기능
		- Registry에 접근 가능한 인증서 파일을 생성하여 Secure Registry를 구축한다. 
		- Reigstry를 사용하기 위해 Image Push가 선행되어야 한다. Image Push는 아래의 'Registry에 Image Push하기'를 참고하면된다.
		- Secure Registry의 이미지를 사용하기 위해서는 인증서와 imagePullSecret이 있어야하는데 Registry 생성과 함께 자동으로 발급된다.
		- 인증서는 hpcd-{REGISTRY_NAME} Secret에 관리되고 있으며 secret watcher에 의해 모든 노드에 이 인증서를 보관한다.
		- imagePullSecret은 hpcd-registry-{REGISTRY_NAME} Secret에 관리되고 있으며 Pod 생성시 imagePullSecret 필드에 이름을 입력하여 사용한다.
	- Registry에 Image Push하기
		- 인증서 등록을 위해 아래의  1), 2) 둘 중 하나의 과정 수행 (Note: Windows에서 인증서 내용을 Windows 파일(.txt 등)로 저장하여 옮길 경우 줄 바꿈에 대한 dummy 문자가 추가될 수 있으므로 파일내용을 바로 복사 붙여넣기 하는 것은 권장함)
			1) CA 등록하기
				1-1) hpcd-{REGISTRY_NAME} 이름의 Secret에서 인증서  파일(*.crt)을 /etc/docker/certs.d/{REGISTRY_IP}:{REGISTRY_PORT} 디렉토리에 추가
				1-2) hpcd-{REGISTRY_NAME} 이름의 Secret에서 인증서  파일(*.crt)을 /usr/local/share/ca-certificates 디렉토리에 추가
				1-3) update-ca-certificates 명령어로 CA 업데이트 
			2) hpcd-{REGISTRY_NAME} 이름의 Secret에서 인증서  파일(*.crt, *.cert, *.key)을 /etc/docker/certs.d/{REGISTRY_IP}:{REGISTRY_PORT} 디렉토리에 추가
		- docker login {REGISTRY_IP}:{REGISTRY_PORT}
			- {REGISTRY_IP}:{REGISTRY_PORT} 값은 생성한 Registry의 annotation 필드로 registry-login-url 확인
			- loginId, loginPassword 입력
		- docker tag image {REGISTRY_IP}:{REGISTRY_PORT}/image
		- docker push {REGISTRY_IP}:{REGISTRY_PORT}/image
	- customConfigYml 사용법
		- 사용자용 config.yml을 사용하고 싶은 경우 CM을 생성하여 적용
		- CM의 data에 반드시 키값을 config.yml으로 하여 내용 작성 
			- docker registry 공식 홈페이지(https://docs.docker.com/registry/configuration) 을 참고하여 config 설정
		- config.yml에 notifications가 hypercloud4-operator로 설정되어 있지 않으면 image sync가 맞지 않을 수 있음
		- CM 작성 예시
			apiVersion: v1
			kind: ConfigMap
			metadata:
			  name: registry-config
			  namespace: hypercloud4-system
			data:
			  config.yml: |
				version: 0.1
				log:
				  fields:
					service: registry
				storage:
				  cache:
					blobdescriptor: inmemory
				  filesystem:
					rootdirectory: /var/lib/registry
				  delete:
					enabled: true
				http:
				  addr: :5000
				  headers:
					X-Content-Type-Options: [nosniff]
				health:
				  storagedriver:
					enabled: true
					interval: 10s
					threshold: 3
				notifications:
				  endpoints:
				  - name: hypercloud4-operator
					url: http://hypercloud4-operator-service.hypercloud4-system:28677/registry/event
				